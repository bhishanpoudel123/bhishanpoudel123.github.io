[
  {
    "id": 1,
    "category": "SQL Sqlite",
    "question": "What is the purpose of the `WITHOUT ROWID` clause in SQLite?",
    "options": [
      "To create a view without row numbers",
      "To disable rowid for performance reasons",
      "To create a table without the implicit ROWID column",
      "To avoid storing duplicate rows"
    ],
    "answer": "To create a table without the implicit ROWID column",
    "explanation": "`WITHOUT ROWID` creates a table without the implicit `ROWID`, useful for certain optimizations."
  },
  {
    "id": 2,
    "category": "SQL Sqlite",
    "question": "Which function would you use in SQLite to get the current timestamp?",
    "options": [
      "NOW()",
      "CURRENT_TIMESTAMP",
      "GETDATE()",
      "SYSDATE"
    ],
    "answer": "CURRENT_TIMESTAMP",
    "explanation": "`CURRENT_TIMESTAMP` returns the current date and time in SQLite."
  },
  {
    "id": 3,
    "category": "SQL Sqlite",
    "question": "What is the default data type of a column in SQLite if not specified?",
    "options": [
      "TEXT",
      "NUMERIC",
      "ANY",
      "NONE"
    ],
    "answer": "NONE",
    "explanation": "If no type is specified, SQLite assigns it an affinity of NONE."
  },
  {
    "id": 4,
    "category": "SQL Sqlite",
    "question": "How are boolean values stored in SQLite?",
    "options": [
      "As TRUE/FALSE literals",
      "As 1 and 0 integers",
      "As BIT type",
      "As TEXT 'true'/'false'"
    ],
    "answer": "As 1 and 0 integers",
    "explanation": "SQLite does not have a separate BOOLEAN type; it uses integers 1 (true) and 0 (false)."
  },
  {
    "id": 5,
    "category": "SQL Sqlite",
    "question": "Which of the following is true about SQLite's `VACUUM` command?",
    "options": [
      "It deletes rows with NULL values",
      "It compacts the database file",
      "It removes duplicate records",
      "It optimizes table indexes"
    ],
    "answer": "It compacts the database file",
    "explanation": "`VACUUM` rebuilds the database file to defragment it and reduce its size."
  },
  {
    "id": 6,
    "category": "SQL Sqlite",
    "question": "Which SQLite command lists all tables in the database?",
    "options": [
      "SHOW TABLES",
      "SELECT * FROM sqlite_master WHERE type='table'",
      ".list tables",
      "DESCRIBE"
    ],
    "answer": "SELECT * FROM sqlite_master WHERE type='table'",
    "explanation": "SQLite uses the `sqlite_master` table to store metadata about the database, including table names."
  },
  {
    "id": 7,
    "category": "SQL Sqlite",
    "question": "Which of the following is true about SQLite's `VACUUM` command?",
    "options": [
      "It deletes rows with NULL values",
      "It compacts the database file",
      "It removes duplicate records",
      "It optimizes table indexes"
    ],
    "answer": "It compacts the database file",
    "explanation": "`VACUUM` rebuilds the database file to defragment it and reduce its size."
  },
  {
    "id": 8,
    "category": "SQL Sqlite",
    "question": "What is the purpose of the `WITHOUT ROWID` clause in SQLite?",
    "options": [
      "To create a view without row numbers",
      "To disable rowid for performance reasons",
      "To create a table without the implicit ROWID column",
      "To avoid storing duplicate rows"
    ],
    "answer": "To create a table without the implicit ROWID column",
    "explanation": "`WITHOUT ROWID` creates a table without the implicit `ROWID`, useful for certain optimizations."
  },
  {
    "id": 9,
    "category": "SQL Sqlite",
    "question": "Which SQLite command allows you to see the schema of a table?",
    "options": [
      "PRAGMA schema",
      "SHOW TABLE",
      "DESCRIBE",
      ".schema"
    ],
    "answer": ".schema",
    "explanation": "`.schema` is a command in the SQLite shell that shows the schema for tables."
  },
  {
    "id": 10,
    "category": "SQL Sqlite",
    "question": "How does SQLite handle foreign key constraints by default?",
    "options": [
      "They are enforced automatically",
      "They must be manually triggered",
      "They are off by default and must be enabled",
      "They are not supported in SQLite"
    ],
    "answer": "They are off by default and must be enabled",
    "explanation": "SQLite supports foreign keys, but enforcement must be enabled with `PRAGMA foreign_keys = ON`."
  },
  {
    "id": 11,
    "category": "SQL Sqlite",
    "question": "Which SQLite command lists all tables in the database?",
    "options": [
      "SHOW TABLES",
      "SELECT * FROM sqlite_master WHERE type='table'",
      ".list tables",
      "DESCRIBE"
    ],
    "answer": "SELECT * FROM sqlite_master WHERE type='table'",
    "explanation": "SQLite uses the `sqlite_master` table to store metadata about the database, including table names."
  },
  {
    "id": 12,
    "category": "SQL Sqlite",
    "question": "What is the default data type of a column in SQLite if not specified?",
    "options": [
      "TEXT",
      "NUMERIC",
      "ANY",
      "NONE"
    ],
    "answer": "NONE",
    "explanation": "If no type is specified, SQLite assigns it an affinity of NONE."
  },
  {
    "id": 13,
    "category": "SQL Sqlite",
    "question": "How does SQLite implement AUTOINCREMENT?",
    "options": [
      "Using INTEGER PRIMARY KEY",
      "Using IDENTITY",
      "Using SERIAL",
      "Using a sequence object"
    ],
    "answer": "Using INTEGER PRIMARY KEY",
    "explanation": "SQLite uses `INTEGER PRIMARY KEY AUTOINCREMENT` to create an auto-incrementing ID."
  },
  {
    "id": 14,
    "category": "SQL Sqlite",
    "question": "What is the default data type of a column in SQLite if not specified?",
    "options": [
      "TEXT",
      "NUMERIC",
      "ANY",
      "NONE"
    ],
    "answer": "NONE",
    "explanation": "If no type is specified, SQLite assigns it an affinity of NONE."
  },
  {
    "id": 15,
    "category": "SQL Sqlite",
    "question": "What pragma statement turns on write-ahead logging in SQLite?",
    "options": [
      "PRAGMA enable_wal = ON",
      "PRAGMA journal_mode = WAL",
      "PRAGMA log_mode = ON",
      "PRAGMA write_ahead = TRUE"
    ],
    "answer": "PRAGMA journal_mode = WAL",
    "explanation": "`PRAGMA journal_mode = WAL` enables write-ahead logging in SQLite."
  },
  {
    "id": 16,
    "category": "SQL Sqlite",
    "question": "Which function would you use in SQLite to get the current timestamp?",
    "options": [
      "NOW()",
      "CURRENT_TIMESTAMP",
      "GETDATE()",
      "SYSDATE"
    ],
    "answer": "CURRENT_TIMESTAMP",
    "explanation": "`CURRENT_TIMESTAMP` returns the current date and time in SQLite."
  },
  {
    "id": 17,
    "category": "SQL Sqlite",
    "question": "Which of the following is true about SQLite's `VACUUM` command?",
    "options": [
      "It deletes rows with NULL values",
      "It compacts the database file",
      "It removes duplicate records",
      "It optimizes table indexes"
    ],
    "answer": "It compacts the database file",
    "explanation": "`VACUUM` rebuilds the database file to defragment it and reduce its size."
  },
  {
    "id": 18,
    "category": "SQL Sqlite",
    "question": "How does SQLite implement AUTOINCREMENT?",
    "options": [
      "Using INTEGER PRIMARY KEY",
      "Using IDENTITY",
      "Using SERIAL",
      "Using a sequence object"
    ],
    "answer": "Using INTEGER PRIMARY KEY",
    "explanation": "SQLite uses `INTEGER PRIMARY KEY AUTOINCREMENT` to create an auto-incrementing ID."
  },
  {
    "id": 19,
    "category": "SQL Sqlite",
    "question": "What pragma statement turns on write-ahead logging in SQLite?",
    "options": [
      "PRAGMA enable_wal = ON",
      "PRAGMA journal_mode = WAL",
      "PRAGMA log_mode = ON",
      "PRAGMA write_ahead = TRUE"
    ],
    "answer": "PRAGMA journal_mode = WAL",
    "explanation": "`PRAGMA journal_mode = WAL` enables write-ahead logging in SQLite."
  },
  {
    "id": 20,
    "category": "SQL Sqlite",
    "question": "What pragma statement turns on write-ahead logging in SQLite?",
    "options": [
      "PRAGMA enable_wal = ON",
      "PRAGMA journal_mode = WAL",
      "PRAGMA log_mode = ON",
      "PRAGMA write_ahead = TRUE"
    ],
    "answer": "PRAGMA journal_mode = WAL",
    "explanation": "`PRAGMA journal_mode = WAL` enables write-ahead logging in SQLite."
  },
  {
    "id": 21,
    "category": "SQL Sqlite",
    "question": "What is the default data type of a column in SQLite if not specified?",
    "options": [
      "TEXT",
      "NUMERIC",
      "ANY",
      "NONE"
    ],
    "answer": "NONE",
    "explanation": "If no type is specified, SQLite assigns it an affinity of NONE."
  },
  {
    "id": 22,
    "category": "SQL Sqlite",
    "question": "How does SQLite implement AUTOINCREMENT?",
    "options": [
      "Using INTEGER PRIMARY KEY",
      "Using IDENTITY",
      "Using SERIAL",
      "Using a sequence object"
    ],
    "answer": "Using INTEGER PRIMARY KEY",
    "explanation": "SQLite uses `INTEGER PRIMARY KEY AUTOINCREMENT` to create an auto-incrementing ID."
  },
  {
    "id": 23,
    "category": "SQL Sqlite",
    "question": "What is the purpose of the `WITHOUT ROWID` clause in SQLite?",
    "options": [
      "To create a view without row numbers",
      "To disable rowid for performance reasons",
      "To create a table without the implicit ROWID column",
      "To avoid storing duplicate rows"
    ],
    "answer": "To create a table without the implicit ROWID column",
    "explanation": "`WITHOUT ROWID` creates a table without the implicit `ROWID`, useful for certain optimizations."
  },
  {
    "id": 24,
    "category": "SQL Sqlite",
    "question": "Which SQLite command allows you to see the schema of a table?",
    "options": [
      "PRAGMA schema",
      "SHOW TABLE",
      "DESCRIBE",
      ".schema"
    ],
    "answer": ".schema",
    "explanation": "`.schema` is a command in the SQLite shell that shows the schema for tables."
  },
  {
    "id": 25,
    "category": "SQL Sqlite",
    "question": "How does SQLite handle foreign key constraints by default?",
    "options": [
      "They are enforced automatically",
      "They must be manually triggered",
      "They are off by default and must be enabled",
      "They are not supported in SQLite"
    ],
    "answer": "They are off by default and must be enabled",
    "explanation": "SQLite supports foreign keys, but enforcement must be enabled with `PRAGMA foreign_keys = ON`."
  },
  {
    "id": 26,
    "category": "SQL Sqlite",
    "question": "Which of the following is true about SQLite's `VACUUM` command?",
    "options": [
      "It deletes rows with NULL values",
      "It compacts the database file",
      "It removes duplicate records",
      "It optimizes table indexes"
    ],
    "answer": "It compacts the database file",
    "explanation": "`VACUUM` rebuilds the database file to defragment it and reduce its size."
  },
  {
    "id": 27,
    "category": "SQL Sqlite",
    "question": "Which function would you use in SQLite to get the current timestamp?",
    "options": [
      "NOW()",
      "CURRENT_TIMESTAMP",
      "GETDATE()",
      "SYSDATE"
    ],
    "answer": "CURRENT_TIMESTAMP",
    "explanation": "`CURRENT_TIMESTAMP` returns the current date and time in SQLite."
  },
  {
    "id": 28,
    "category": "SQL Sqlite",
    "question": "How does SQLite implement AUTOINCREMENT?",
    "options": [
      "Using INTEGER PRIMARY KEY",
      "Using IDENTITY",
      "Using SERIAL",
      "Using a sequence object"
    ],
    "answer": "Using INTEGER PRIMARY KEY",
    "explanation": "SQLite uses `INTEGER PRIMARY KEY AUTOINCREMENT` to create an auto-incrementing ID."
  },
  {
    "id": 29,
    "category": "SQL Sqlite",
    "question": "How are boolean values stored in SQLite?",
    "options": [
      "As TRUE/FALSE literals",
      "As 1 and 0 integers",
      "As BIT type",
      "As TEXT 'true'/'false'"
    ],
    "answer": "As 1 and 0 integers",
    "explanation": "SQLite does not have a separate BOOLEAN type; it uses integers 1 (true) and 0 (false)."
  },
  {
    "id": 30,
    "category": "SQL Sqlite",
    "question": "How does SQLite implement AUTOINCREMENT?",
    "options": [
      "Using INTEGER PRIMARY KEY",
      "Using IDENTITY",
      "Using SERIAL",
      "Using a sequence object"
    ],
    "answer": "Using INTEGER PRIMARY KEY",
    "explanation": "SQLite uses `INTEGER PRIMARY KEY AUTOINCREMENT` to create an auto-incrementing ID."
  },
  {
    "id": 31,
    "category": "SQL Sqlite",
    "question": "How does SQLite implement AUTOINCREMENT?",
    "options": [
      "Using INTEGER PRIMARY KEY",
      "Using IDENTITY",
      "Using SERIAL",
      "Using a sequence object"
    ],
    "answer": "Using INTEGER PRIMARY KEY",
    "explanation": "SQLite uses `INTEGER PRIMARY KEY AUTOINCREMENT` to create an auto-incrementing ID."
  },
  {
    "id": 32,
    "category": "SQL Sqlite",
    "question": "How does SQLite implement AUTOINCREMENT?",
    "options": [
      "Using INTEGER PRIMARY KEY",
      "Using IDENTITY",
      "Using SERIAL",
      "Using a sequence object"
    ],
    "answer": "Using INTEGER PRIMARY KEY",
    "explanation": "SQLite uses `INTEGER PRIMARY KEY AUTOINCREMENT` to create an auto-incrementing ID."
  },
  {
    "id": 33,
    "category": "SQL Sqlite",
    "question": "How does SQLite handle foreign key constraints by default?",
    "options": [
      "They are enforced automatically",
      "They must be manually triggered",
      "They are off by default and must be enabled",
      "They are not supported in SQLite"
    ],
    "answer": "They are off by default and must be enabled",
    "explanation": "SQLite supports foreign keys, but enforcement must be enabled with `PRAGMA foreign_keys = ON`."
  },
  {
    "id": 34,
    "category": "SQL Sqlite",
    "question": "How does SQLite implement AUTOINCREMENT?",
    "options": [
      "Using INTEGER PRIMARY KEY",
      "Using IDENTITY",
      "Using SERIAL",
      "Using a sequence object"
    ],
    "answer": "Using INTEGER PRIMARY KEY",
    "explanation": "SQLite uses `INTEGER PRIMARY KEY AUTOINCREMENT` to create an auto-incrementing ID."
  },
  {
    "id": 35,
    "category": "SQL Sqlite",
    "question": "Which function would you use in SQLite to get the current timestamp?",
    "options": [
      "NOW()",
      "CURRENT_TIMESTAMP",
      "GETDATE()",
      "SYSDATE"
    ],
    "answer": "CURRENT_TIMESTAMP",
    "explanation": "`CURRENT_TIMESTAMP` returns the current date and time in SQLite."
  },
  {
    "id": 36,
    "category": "SQL Sqlite",
    "question": "How does SQLite implement AUTOINCREMENT?",
    "options": [
      "Using INTEGER PRIMARY KEY",
      "Using IDENTITY",
      "Using SERIAL",
      "Using a sequence object"
    ],
    "answer": "Using INTEGER PRIMARY KEY",
    "explanation": "SQLite uses `INTEGER PRIMARY KEY AUTOINCREMENT` to create an auto-incrementing ID."
  },
  {
    "id": 37,
    "category": "SQL Sqlite",
    "question": "What is the default data type of a column in SQLite if not specified?",
    "options": [
      "TEXT",
      "NUMERIC",
      "ANY",
      "NONE"
    ],
    "answer": "NONE",
    "explanation": "If no type is specified, SQLite assigns it an affinity of NONE."
  },
  {
    "id": 38,
    "category": "SQL Sqlite",
    "question": "What pragma statement turns on write-ahead logging in SQLite?",
    "options": [
      "PRAGMA enable_wal = ON",
      "PRAGMA journal_mode = WAL",
      "PRAGMA log_mode = ON",
      "PRAGMA write_ahead = TRUE"
    ],
    "answer": "PRAGMA journal_mode = WAL",
    "explanation": "`PRAGMA journal_mode = WAL` enables write-ahead logging in SQLite."
  },
  {
    "id": 39,
    "category": "SQL Sqlite",
    "question": "How are boolean values stored in SQLite?",
    "options": [
      "As TRUE/FALSE literals",
      "As 1 and 0 integers",
      "As BIT type",
      "As TEXT 'true'/'false'"
    ],
    "answer": "As 1 and 0 integers",
    "explanation": "SQLite does not have a separate BOOLEAN type; it uses integers 1 (true) and 0 (false)."
  },
  {
    "id": 40,
    "category": "SQL Sqlite",
    "question": "How are boolean values stored in SQLite?",
    "options": [
      "As TRUE/FALSE literals",
      "As 1 and 0 integers",
      "As BIT type",
      "As TEXT 'true'/'false'"
    ],
    "answer": "As 1 and 0 integers",
    "explanation": "SQLite does not have a separate BOOLEAN type; it uses integers 1 (true) and 0 (false)."
  },
  {
    "id": 41,
    "category": "SQL Sqlite",
    "question": "How does SQLite handle foreign key constraints by default?",
    "options": [
      "They are enforced automatically",
      "They must be manually triggered",
      "They are off by default and must be enabled",
      "They are not supported in SQLite"
    ],
    "answer": "They are off by default and must be enabled",
    "explanation": "SQLite supports foreign keys, but enforcement must be enabled with `PRAGMA foreign_keys = ON`."
  },
  {
    "id": 42,
    "category": "SQL Sqlite",
    "question": "What is the purpose of the `WITHOUT ROWID` clause in SQLite?",
    "options": [
      "To create a view without row numbers",
      "To disable rowid for performance reasons",
      "To create a table without the implicit ROWID column",
      "To avoid storing duplicate rows"
    ],
    "answer": "To create a table without the implicit ROWID column",
    "explanation": "`WITHOUT ROWID` creates a table without the implicit `ROWID`, useful for certain optimizations."
  },
  {
    "id": 43,
    "category": "SQL Sqlite",
    "question": "Which SQLite command lists all tables in the database?",
    "options": [
      "SHOW TABLES",
      "SELECT * FROM sqlite_master WHERE type='table'",
      ".list tables",
      "DESCRIBE"
    ],
    "answer": "SELECT * FROM sqlite_master WHERE type='table'",
    "explanation": "SQLite uses the `sqlite_master` table to store metadata about the database, including table names."
  },
  {
    "id": 44,
    "category": "SQL Sqlite",
    "question": "What is the default data type of a column in SQLite if not specified?",
    "options": [
      "TEXT",
      "NUMERIC",
      "ANY",
      "NONE"
    ],
    "answer": "NONE",
    "explanation": "If no type is specified, SQLite assigns it an affinity of NONE."
  },
  {
    "id": 45,
    "category": "SQL Sqlite",
    "question": "Which SQLite command allows you to see the schema of a table?",
    "options": [
      "PRAGMA schema",
      "SHOW TABLE",
      "DESCRIBE",
      ".schema"
    ],
    "answer": ".schema",
    "explanation": "`.schema` is a command in the SQLite shell that shows the schema for tables."
  },
  {
    "id": 46,
    "category": "SQL Sqlite",
    "question": "How are boolean values stored in SQLite?",
    "options": [
      "As TRUE/FALSE literals",
      "As 1 and 0 integers",
      "As BIT type",
      "As TEXT 'true'/'false'"
    ],
    "answer": "As 1 and 0 integers",
    "explanation": "SQLite does not have a separate BOOLEAN type; it uses integers 1 (true) and 0 (false)."
  },
  {
    "id": 47,
    "category": "SQL Sqlite",
    "question": "What is the purpose of the `WITHOUT ROWID` clause in SQLite?",
    "options": [
      "To create a view without row numbers",
      "To disable rowid for performance reasons",
      "To create a table without the implicit ROWID column",
      "To avoid storing duplicate rows"
    ],
    "answer": "To create a table without the implicit ROWID column",
    "explanation": "`WITHOUT ROWID` creates a table without the implicit `ROWID`, useful for certain optimizations."
  },
  {
    "id": 48,
    "category": "SQL Sqlite",
    "question": "Which function would you use in SQLite to get the current timestamp?",
    "options": [
      "NOW()",
      "CURRENT_TIMESTAMP",
      "GETDATE()",
      "SYSDATE"
    ],
    "answer": "CURRENT_TIMESTAMP",
    "explanation": "`CURRENT_TIMESTAMP` returns the current date and time in SQLite."
  },
  {
    "id": 49,
    "category": "SQL Sqlite",
    "question": "How does SQLite handle foreign key constraints by default?",
    "options": [
      "They are enforced automatically",
      "They must be manually triggered",
      "They are off by default and must be enabled",
      "They are not supported in SQLite"
    ],
    "answer": "They are off by default and must be enabled",
    "explanation": "SQLite supports foreign keys, but enforcement must be enabled with `PRAGMA foreign_keys = ON`."
  },
  {
    "id": 50,
    "category": "SQL Sqlite",
    "question": "Which of the following is true about SQLite's `VACUUM` command?",
    "options": [
      "It deletes rows with NULL values",
      "It compacts the database file",
      "It removes duplicate records",
      "It optimizes table indexes"
    ],
    "answer": "It compacts the database file",
    "explanation": "`VACUUM` rebuilds the database file to defragment it and reduce its size."
  }
]