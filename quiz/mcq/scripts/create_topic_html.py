import os
import json
from pathlib import Path
import datetime

def format_category_name(folder_name):
    """Convert folder name (with underscores) to display name (with spaces)"""
    return folder_name.replace('_', ' ')

def read_file_content(file_path):
    """Read content from a file with error handling"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        return f"Error reading file: {str(e)}"

def render_markdown(content):
    """Convert markdown to HTML"""
    import markdown
    return markdown.markdown(content)

def create_topic_html(topic_dir, topic_folder):
    """Create a comprehensive HTML file for a topic"""
    topic_name = format_category_name(topic_folder)
    questions_dir = os.path.join(topic_dir, 'questions')
    output_file = os.path.join(topic_dir, f"{topic_folder.lower()}.html")
    
    if not os.path.exists(questions_dir):
        print(f"‚ö†Ô∏è No questions directory found for topic: {topic_name}")
        return None
    
    # HTML template with styling and structure
    html_template = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{topic_name} Learning Resources</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
        }}
        .container {{
            max-width: 900px;
            margin: 0 auto;
        }}
        h1, h2, h3 {{
            color: #2c3e50;
        }}
        .toc {{
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }}
        .question {{
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #eee;
        }}
        .question-title {{
            color: #3498db;
        }}
        .answer {{
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
        }}
        .explanation {{
            background: #e8f4f8;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
        }}
        details {{
            margin: 10px 0;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }}
        summary {{
            font-weight: bold;
            cursor: pointer;
        }}
        pre {{
            background: #f5f5f5;
            padding: 10px;
            border-radius: 3px;
            overflow-x: auto;
        }}
        code {{
            font-family: 'Courier New', monospace;
        }}
        .resource {{
            margin-top: 15px;
        }}
        .resource-title {{
            font-weight: bold;
            color: #2c3e50;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>{topic_name} Learning Resources</h1>
        <div class="toc">
            <h2>Table of Contents</h2>
            <ul id="toc-list">
                <!-- TOC will be generated by JavaScript -->
            </ul>
        </div>
        <div id="questions-container">
            <!-- Questions will be inserted here -->
        </div>
    </div>

    <script>
        // Generate table of contents
        document.addEventListener('DOMContentLoaded', function() {{
            const questions = document.querySelectorAll('.question');
            const tocList = document.getElementById('toc-list');
            
            questions.forEach(function(question, index) {{
                const questionId = 'q-' + index;
                question.id = questionId;
                const title = question.querySelector('.question-title').textContent;
                
                const tocItem = document.createElement('li');
                const tocLink = document.createElement('a');
                tocLink.href = '#' + questionId;
                tocLink.textContent = title;
                tocItem.appendChild(tocLink);
                tocList.appendChild(tocItem);
            }});
        }});
    </script>
</body>
</html>
"""
    
    # Parse the HTML template
    from bs4 import BeautifulSoup
    soup = BeautifulSoup(html_template, 'html.parser')
    questions_container = soup.find('div', {'id': 'questions-container'})
    
    # Find all question folders
    question_folders = sorted([d for d in os.listdir(questions_dir) if d.startswith('qn_')])
    
    for index, qn_folder in enumerate(question_folders):
        qn_dir = os.path.join(questions_dir, qn_folder)
        qn_json = os.path.join(qn_dir, f"{qn_folder}.json")
        
        if not os.path.exists(qn_json):
            continue
        
        try:
            # Load question data
            with open(qn_json, 'r', encoding='utf-8') as f:
                question_data = json.load(f)
            
            # Create question section
            question_div = soup.new_tag('div', attrs={'class': 'question'})
            question_div['id'] = f'q-{index}'
            
            # Add question title
            qn_title = soup.new_tag('h2', attrs={'class': 'question-title'})
            qn_title.string = f"Qn {question_data['id']}: {question_data['question']}"
            question_div.append(qn_title)
            
            # Add answer
            answer_div = soup.new_tag('div', attrs={'class': 'answer'})
            answer_title = soup.new_tag('h3')
            answer_title.string = "Answer"
            answer_div.append(answer_title)
            answer_div.append(BeautifulSoup(render_markdown(question_data['answer']), 'html.parser'))
            question_div.append(answer_div)
            
            # Add explanation
            if 'explanation' in question_data and question_data['explanation']:
                explanation_div = soup.new_tag('div', attrs={'class': 'explanation'})
                explanation_title = soup.new_tag('h3')
                explanation_title.string = "Explanation"
                explanation_div.append(explanation_title)
                explanation_div.append(BeautifulSoup(render_markdown(question_data['explanation']), 'html.parser'))
                question_div.append(explanation_div)
            
            # Add learning resources if they exist
            if 'learning_resources' in question_data and question_data['learning_resources']:
                resources_title = soup.new_tag('h3')
                resources_title.string = "Additional Resources"
                question_div.append(resources_title)
                
                for resource in question_data['learning_resources']:
                    # Handle both relative and absolute paths
                    resource_path = resource['path']
                    if resource_path.startswith('data/'):
                        # Remove the data/ prefix if present
                        resource_path = resource_path[5:]
                    full_path = os.path.join(qn_dir, resource_path)
                    
                    # Create collapsible resource section
                    details = soup.new_tag('details')
                    summary = soup.new_tag('summary')
                    summary.string = f"{resource['title']} ({resource['type']})"
                    details.append(summary)
                    
                    resource_div = soup.new_tag('div', attrs={'class': 'resource'})
                    
                    # Handle different resource types
                    if resource['type'] == 'markdown':
                        content = read_file_content(full_path)
                        resource_div.append(BeautifulSoup(render_markdown(content), 'html.parser'))
                    elif resource['type'] == 'html':
                        content = read_file_content(full_path)
                        resource_div.append(BeautifulSoup(content, 'html.parser'))
                    elif resource['type'] == 'code':
                        content = read_file_content(full_path)
                        pre = soup.new_tag('pre')
                        code = soup.new_tag('code', attrs={'class': f"language-{resource_path.split('.')[-1]}"})
                        code.string = content
                        pre.append(code)
                        resource_div.append(pre)
                    
                    details.append(resource_div)
                    question_div.append(details)
            
            questions_container.append(question_div)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error processing {qn_folder}: {str(e)}")
            continue
    
    # Write the final HTML file
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(str(soup))
    
    print(f"\nüéâ Created topic HTML: {output_file}")
    return output_file

def main():
    # Get the data directory path
    data_dir = os.path.join(os.path.dirname(__file__), '..', 'data')
    
    if not os.path.exists(data_dir):
        print("‚õî Error: 'data' directory not found")
        return
    
    print("üöÄ Starting HTML creation for topics...")
    print(f"üìÇ Data directory: {os.path.abspath(data_dir)}")
    
    # Find all topic directories
    topics = [d for d in os.listdir(data_dir) 
              if os.path.isdir(os.path.join(data_dir, d)) and not d.startswith('.')]
    
    if not topics:
        print("‚õî No topics found in data directory")
        return
    
    print(f"\nFound {len(topics)} topics: {', '.join(format_category_name(t) for t in topics)}")
    
    # Create HTML for each topic
    for topic_folder in topics:
        topic_dir = os.path.join(data_dir, topic_folder)
        html_file = create_topic_html(topic_dir, topic_folder)
        if html_file:
            print(f"‚úÖ Created HTML for {format_category_name(topic_folder)}")
    
    print("\nüèÅ Completed HTML generation for all topics")

if __name__ == "__main__":
    # Install required packages if not available
    try:
        from bs4 import BeautifulSoup
    except ImportError:
        print("Install required packages...")    
    main()